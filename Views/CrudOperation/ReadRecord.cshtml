@model CRUDmvc.Model.ReadRecordResponse
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Read Records</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link href="https://cdn.datatables.net/1.13.4/css/dataTables.bootstrap5.min.css" rel="stylesheet">
    <style>
        table, th, td {
            margin: 1px;
        }

        .btnStyle {
            margin: 0 auto;
            display: block;
        }

        .bdr {
            border-radius: 6px;
            overflow: hidden;
        }

        @@keyframes pulse {
            0% {
                opacity: 1;
            }

            50% {
                background-color: #DC3444;
                opacity: 0.8;
            }

            100% {
                opacity: 1;
            }
        }

        .highlight {
            animation: pulse 1s infinite;
        }
    </style>
</head>
@*linq with C# and implent it: first , default*@

<body style="background-color: black; color:white;">

    <center><h1 style="color: white; text-shadow: 2px 2px 5px red; " >Purdue Directory</h1></center>
    <div class="d-flex flex-column align-items-center">
        <div class="w-75">
            <table class="table table-striped table-hover bdr" id="myTable" style="background-color: beige; color: black;">
                <thead>
                    <tr>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Age</th>
                        <th>Major</th>
                        <th>Education</th>
                        <th>Created</th>
                        <th class="no_sort">Delete</th>
                        <th class="no_sort">Update</th>
                    </tr>
                </thead>
                <tbody id="mainTable" class="rounded-2">
                    @*@foreach (var record in Model.data)
                        {
                            <tr id="@record.Id">
                                <td class="fName" contenteditable="true">@record.firstName</td>
                                <td class="lName" contenteditable="true">@record.lastName</td>
                                <td class="age" contenteditable="true">@record.age</td>
                                <td class="major" contenteditable="true">@record.major</td>
                                <td class="eduLvl" contenteditable="true">@Model.edLevel[record.educationLevel]</td>
                                <td class="created"> @record.CreatedDate</td>
                                <td><button type="button" class="btn btn-outline-danger" onclick="deleteRecord('@record.Id')">Delete</button></td>
                                <td><button type="button" class="btn btn-outline-primary" onclick="updateRecord('@record.Id')">Update</button></td>
                            </tr>
                        }*@
                </tbody>
            </table>
            <table class="table table-striped table-hover table-bordered nowrap" style="background-color: beige; color: black; border-radius: 25px;">
                <tbody>
                    <tr id="insertRow" style="display:none;">
                        <td class="fName" contenteditable="true" style="color: grey; width: 15%;" onclick="changeStyle(this)">First Name</td>
                        <td class="lName" contenteditable="true" style="color: grey; width: 15%;" onclick="changeStyle(this)">Last Name</td>
                        <td class="age" contenteditable="true" style="color: grey; width: 15%;" onclick="changeStyle(this)">1-9</td>
                        <td class="major" contenteditable="true" style="color: grey; width: 15%;" onclick="changeStyle(this)">Major</td>
                        <td class="eduLvl" contenteditable="true" style="color: grey; width: 15%;" onclick="changeStyle(this)">1-9</td>
                        <td colspan="2"><button type="button" class="btn btn-outline-primary" onclick="insertRecord()" style="margin: 0 auto; display: block; width: 50%;">Insert</button></td>
                    </tr>

                </tbody>
            </table>
        </div>
        <div class="w-75">
            <div class="row row-cols-2 justify-content-center">
                <button onclick="showInsert()" type="button" class="col btn btn-outline-light" style="width:25%;margin-right:5%;">Insert</button>
                <button onclick="showFixes()" type="button" class="col btn btn-outline-danger" style="width:25%;">FixMe</button>
            </div>
        </div>
    </div>
    <!-- Include jQuery before DataTables and Bootstrap JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.4/js/dataTables.bootstrap5.min.js"></script>

    <!-- Initialize DataTables -->
    <script>var fixes = null;
        $(document).ready(function () {
            table = $('#myTable').DataTable({
                order: [[5, 'desc']],
                "columnDefs": [
                    { targets: [0, 1, 2, 3, 4], createdCell: function (td, cellData, rowData, row, col) { $(td).attr('contenteditable', 'true'); } },
                    {
                        "targets": [6, 7],
                        "orderable": false,
                    },
                    {
                        target: [5],
                        visible: false,
                    }
                ]
            });
            refresh();
        });
        function showFixes() {
            console.log("clicked");
            console.log(fixes);
            fixes.forEach((fix) => {
                var row = document.getElementById(fix.id);
                console.log(row);
                var data = row.getElementsByTagName('td');
                console.log(data);
                Array.from(data).forEach((col) => {
                    col.classList.add('highlight');
                });
            });
        }

        function changeStyle(element) {
            element.innerText = '';
            element.style.color = "black";
        }
        function refresh() {
            var element = document.getElementById("insertRow");
            insertRow.style.display = "none";
            $.ajax({
                url: '/en/CrudOperation/ReadRecord',
                type: 'GET',
                success: function (data) {
                    table.clear().draw();
                    fixes = data.fixMe;
                    console.log(fixes);
                    var records = data.data;
                    records.forEach(function (record) {
                        var eduList = ["NotSure", "Freshman", "Sophomore", "Junior", "Senior", "PostGraduate"];
                        if (record.educationLevel < 0 || record.educationLevel > 5) {
                            record.educationLevel = 0;
                        }
                        var rowNode = table.row.add([
                            '<td class="fName">' + record.firstName + '</td>',
                            '<td class="lName">' + record.lastName + '</td>',
                            '<td class="age">' + record.age + '</td>',
                            '<td class="major">' + record.major + '</td>',
                            '<td class="eduLvl">' + eduList[record.educationLevel] + '</td>',
                            '<td class="created">' + record.createdDate + '</td>',
                            '<td><button type="button" class="btn btn-outline-danger btnStyle" onclick="deleteRecord(\'' + record.id + '\')">Delete</button></td>',
                            '<td><button type="button" class="btn btn-outline-primary btnStyle" onclick="updateRecord(\'' + record.id + '\')">Update</button></td>'
                        ]).draw().node();
                        $(rowNode).attr('id', record.id);
                    });

                },
                error: function (xhr, status, error) {
                    console.log('Error updating record: ' + error);
                }
            });
        }

        function showInsert() {
            var element = document.getElementById("insertRow");
            var cells = element.querySelectorAll('td'); // Select all <td> elements within the row
            cells.forEach(function (cell) {
                cell.style.color = "grey"; // Apply the color to each cell
            });
            element.querySelector('.fName').innerText = "First Name";
            element.querySelector('.lName').innerText = "Last Name";
            element.querySelector('.age').innerText = "0-9";
            element.querySelector('.major').innerText = "Major";
            element.querySelector('.eduLvl').innerText = "0-9";
            insertRow.style.display = "table-row";
        }
        function insertRecord() {
            var element = document.getElementById("insertRow");
            var firstName = element.querySelector('.fName').innerText;
            var lastName = element.querySelector('.lName').innerText;
            var age = element.querySelector('.age').innerText;
            var major = element.querySelector('.major').innerText;
            var educationLevel = parseInt(element.querySelector('.eduLvl').innerText);
            element.style.display = "none";
            if (firstName === "" || isNaN(age) || isNaN(educationLevel) || major === "") {
                console.log("Enter Correct Data!");
                throw new Error("Enter Correct Data!");
            }
            else {
                var data = {
                    firstName: firstName,
                    lastName: lastName,
                    age: age,
                    major: major,
                    educationLevel: educationLevel,
                };
                $.ajax({
                    url: '/en/CrudOperation/InsertRecord',
                    type: 'POST',
                    data: JSON.stringify(data),
                    contentType: 'application/json; charset=utf-8',
                    success: function (response) {
                        console.log('Record updated successfully');
                        refresh();
                    },
                    error: function (xhr, status, error) {
                        console.log('Error upadting record: ' + error);
                    }
                });
            }
        }
        function updateRecord(Id) {
            var element = document.getElementById(Id);
            var listTd = element.getElementsByTagName('td');
            var firstName = listTd[0].outerText;
            var lastName = listTd[1].outerText;
            var age = listTd[2].outerText;
            var major = listTd[3].outerText;
            var educationLevel = parseInt(listTd[4].outerText);
            if (isNaN(educationLevel)) {
                var data = {
                    YOURId: Id,
                    firstName: firstName,
                    lastName: lastName,
                    age: age,
                    major: major,
                };
            }
            else {
                var data = {
                    YOURId: Id,
                    firstName: firstName,
                    lastName: lastName,
                    age: age,
                    major: major,
                    educationLevel: educationLevel,
                };
            }
            $.ajax({
                url: '/en/CrudOperation/UpdateRecord',
                type: 'POST',
                data: JSON.stringify(data),
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    console.log('Record updated successfully');
                    location.reload();
                },
                error: function (xhr, status, error) {
                    console.log('Error upadting record: ' + error);
                }
            });

        }
        function deleteRecord(Id) {
            var data = { YOURId: Id };
            console.log(data);
            $.ajax({
                url: '/en/CrudOperation/DeleteRecord',
                type: 'POST',
                data: JSON.stringify(data),
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    console.log('Record deleted successfully');
                    refresh();
                },
                error: function (xhr, status, error) {
                    console.log('Error deleting record: ' + error);
                }
            });
        }</script>

</body>
</html>
@*TODO: Ckeck for syntax errors
    TODO: when do you use AJAX, and when when do we return(view)

    AJAX is asynchronus, meaning there is no lag between the user website and server, when the user makes a request, the user has access to the website
    allowing him to make more requests, and as in when the requeste is responded to the website is updated.

    With AJAX we get partial page updates, I haven't implemented that YET
    AJAX does not permit bookmarks

    When to Use AJAX GET/POST Methods

    1) Real-Time Updates: If you need to update parts of the page dynamically without reloading the
        entire page (e.g., fetching new data periodically, loading more data on user interaction).
    2) Single Page Applications (SPA): When building SPAs where the page content changes dynamically
        based on user interactions.
    3) Asynchronous Data Loading: To improve user experience by loading data asynchronously (e.g.,
        infinite scrolling, filtering data without refreshing the page).
    4) Partial Page Updates: When only parts of the page need to be updated based on user actions
        (e.g., submitting forms, loading data into modal dialogs).

    When to Use Returning Views

    1) Full Page Renders: When the entire page needs to be refreshed with new data.
    2) SEO Considerations: If SEO is important and you need server-rendered HTML to be indexed by
        search engines.
    3) Simpler Implementation: For simpler applications where the overhead of setting up AJAX is
        not justified.
    4) Consistent State: When you want to ensure the entire page state is consistent and rendered
        by the server.*@