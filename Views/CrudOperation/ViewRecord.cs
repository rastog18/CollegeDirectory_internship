#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CRUDmvc.Views.CrudOperation
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class ViewRecord : ViewRecordBase
{

#line hidden

#line 1 "ViewRecord.cshtml"
public CRUDmvc.Model.ViewMarksResponse Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("    <head>\n        <header>\n            <link");

WriteLiteral(" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEw" +
"IH\"");

WriteLiteral(" crossorigin=\"anonymous\"");

WriteLiteral(@">
        </header>
        <style>
            html, body {
                display: flex;
                justify-content: center;
                align-items: center;
            }
            .btnDiv {
                display: flex;
                justify-content: center;
                align-items: center;           
            }
        </style>
    </head>
    <body");

WriteLiteral(" style=\"background-color: black\"");

WriteLiteral(">\n\n");


#line 21 "ViewRecord.cshtml"
    

#line default
#line hidden

#line 21 "ViewRecord.cshtml"
     if (Model != null && Model.Message != null)
    {


#line default
#line hidden
WriteLiteral("        <div");

WriteLiteral(" class=\"d-flex flex-column\"");

WriteLiteral(">\n");


#line 24 "ViewRecord.cshtml"
            

#line default
#line hidden

#line 24 "ViewRecord.cshtml"
              
                float messageValue;
                if (float.TryParse(Model.Message, out messageValue) && messageValue > 2)
                {


#line default
#line hidden
WriteLiteral("                    <div>\n                        <p");

WriteLiteral(" style=\"color: green;\"");

WriteLiteral(">You have PASSED with ");


#line 29 "ViewRecord.cshtml"
                                                                 Write(Model.Message);


#line default
#line hidden
WriteLiteral(" GPA</p>\n                    </div>\n");


#line 31 "ViewRecord.cshtml"
                }
                else
                {


#line default
#line hidden
WriteLiteral("                    <div >\n                        <p");

WriteLiteral(" style=\"color: red;\"");

WriteLiteral(">You have FAILED with ");


#line 35 "ViewRecord.cshtml"
                                                               Write(Model.Message);


#line default
#line hidden
WriteLiteral(" GPA</p>\n                    </div>\n");


#line 37 "ViewRecord.cshtml"

                }
            

#line default
#line hidden
WriteLiteral(" \n            <div");

WriteLiteral(" class=\"btnDiv\"");

WriteLiteral(">\n                <button");

WriteLiteral(" onclick=\"location.href=\'/Home/Index\';\"");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"btn btn-outline-danger\"");

WriteLiteral(">Return to Home</button>\n            </div>\n        </div>\n");


#line 44 "ViewRecord.cshtml"
       
        
    }
    else
    {


#line default
#line hidden
WriteLiteral("        <div");

WriteLiteral(" class=\"idForm\"");

WriteLiteral(">\n            <form");

WriteLiteral(" asp-action=\"ViewRecord\"");

WriteLiteral(" asp-controller=\"CrudOperation\"");

WriteLiteral(" method=\"post\"");

WriteLiteral(">\n                <div");

WriteLiteral(" class=\"mb-3\"");

WriteLiteral(">\n                    <label");

WriteLiteral(" for=\"Id\"");

WriteLiteral(" class=\"form-label\"");

WriteLiteral(" style=\"color: white\"");

WriteLiteral(">Enter your Id:</label>\n                    <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" class=\"form-control\"");

WriteLiteral(" id=\"Id\"");

WriteLiteral(" name=\"Id\"");

WriteLiteral(" required>\n                </div>\n                <button");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" class=\"btn btn-primary\"");

WriteLiteral(">Submit</button>\n            </form>\n        </div>\n");


#line 58 "ViewRecord.cshtml"
    }


#line default
#line hidden
WriteLiteral("\n\n    </body>\n\n\n\n");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class ViewRecordBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
