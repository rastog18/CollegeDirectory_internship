#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CRUDmvc.Views.Auth
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class AdminIndex : AdminIndexBase
{

#line hidden

#line 1 "AdminIndex.cshtml"
public CRUDmvc.Model.LogReadRecordResponse Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<!DOCTYPE html>\n<html");

WriteLiteral(" lang=\"en\"");

WriteLiteral(">\n<head>\n    <meta");

WriteLiteral(" charset=\"UTF-8\"");

WriteLiteral(">\n    <meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral(" content=\"width=device-width, initial-scale=1.0\"");

WriteLiteral(">\n    <title>Read Records</title>\n    <link");

WriteLiteral(" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEw" +
"IH\"");

WriteLiteral(" crossorigin=\"anonymous\"");

WriteLiteral(">\n    <link");

WriteLiteral(" href=\"https://cdn.datatables.net/1.13.4/css/dataTables.bootstrap5.min.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(@">
    <style>
        table, th, td {
            margin: 1px;
        }

        .btnStyle {
            margin: 0 auto;
            display: block;
        }

        .bdr {
            border-radius: 6px;
            overflow: hidden;
        }

        ");

WriteLiteral(@"@keyframes pulse {
            0% {
                opacity: 1;
            }

            50% {
                background-color: #DC3444;
                opacity: 0.8;
            }

            100% {
                opacity: 1;
            }
        }

        .highlight {
            animation: pulse 1s infinite;
        }
    </style>
</head>
");

WriteLiteral("\n\n<body");

WriteLiteral(" style=\"background-color: black; color:white;\"");

WriteLiteral(">\n\n    <center><h1");

WriteLiteral(" style=\"color: white; text-shadow: 2px 2px 5px red; \"");

WriteLiteral(">User Directory</h1></center>\n    <div");

WriteLiteral(" class=\"d-flex flex-column align-items-center\"");

WriteLiteral(">\n        <div");

WriteLiteral(" class=\"w-75\"");

WriteLiteral(">\n            <table");

WriteLiteral(" class=\"table table-striped table-hover bdr\"");

WriteLiteral(" id=\"myTable\"");

WriteLiteral(" style=\"background-color: beige; color: black;\"");

WriteLiteral(">\n                <thead>\n                    <tr>\n                        <th>Us" +
"ername</th>\n                        <th>Password</th>\n                        <t" +
"h>Role</th>\n                        <th>Blocked</th>\n                        <th" +
"");

WriteLiteral(" class=\"no_sort\"");

WriteLiteral(">Delete</th>\n                        <th");

WriteLiteral(" class=\"no_sort\"");

WriteLiteral(">Update</th>\n                    </tr>\n                </thead>\n                <" +
"tbody");

WriteLiteral(" id=\"mainTable\"");

WriteLiteral(" class=\"rounded-2\"");

WriteLiteral(">\n");


#line 64 "AdminIndex.cshtml"
                    

#line default
#line hidden

#line 64 "AdminIndex.cshtml"
                     foreach (var record in Model.data)
                    {


#line default
#line hidden
WriteLiteral("                        <tr");

WriteAttribute ("id", " id=\"", "\""

#line 66 "AdminIndex.cshtml"
, Tuple.Create<string,object,bool> ("", record.Id

#line default
#line hidden
, false)
);
WriteLiteral(">\n                            <td");

WriteLiteral(" class=\"Username\"");

WriteLiteral(" contenteditable=\"true\"");

WriteLiteral(">");


#line 67 "AdminIndex.cshtml"
                                                                   Write(record.Username);


#line default
#line hidden
WriteLiteral("</td>\n                            <td");

WriteLiteral(" class=\"Password\"");

WriteLiteral(" contenteditable=\"true\"");

WriteLiteral(">");


#line 68 "AdminIndex.cshtml"
                                                                   Write(record.Password);


#line default
#line hidden
WriteLiteral("</td>\n                            <td");

WriteLiteral(" class=\"Role\"");

WriteLiteral(" contenteditable=\"true\"");

WriteLiteral(">");


#line 69 "AdminIndex.cshtml"
                                                               Write(record.Role);


#line default
#line hidden
WriteLiteral("</td>\n                            <td");

WriteLiteral(" class=\"Blocked\"");

WriteLiteral(" contenteditable=\"true\"");

WriteLiteral(">");


#line 70 "AdminIndex.cshtml"
                                                                  Write(record.Blocked);


#line default
#line hidden
WriteLiteral("</td>\n                            <td><button");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"btn btn-outline-danger\"");

WriteAttribute ("onclick", " onclick=\"", "\""
, Tuple.Create<string,object,bool> ("", "deleteRecord(\'", true)

#line 71 "AdminIndex.cshtml"
                                                                     , Tuple.Create<string,object,bool> ("", record.Id

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "\')", true)
);
WriteLiteral(">Delete</button></td>\n                            <td><button");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"btn btn-outline-primary\"");

WriteAttribute ("onclick", " onclick=\"", "\""
, Tuple.Create<string,object,bool> ("", "updateRecord(\'", true)

#line 72 "AdminIndex.cshtml"
                                                                      , Tuple.Create<string,object,bool> ("", record.Id

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "\')", true)
);
WriteLiteral(">Update</button></td>\n                        </tr>\n");


#line 74 "AdminIndex.cshtml"
                    }


#line default
#line hidden
WriteLiteral("                </tbody>\n            </table>\n            <table");

WriteLiteral(" class=\"table table-striped table-hover table-bordered nowrap\"");

WriteLiteral(" style=\"background-color: beige; color: black; border-radius: 25px;\"");

WriteLiteral(">\n                <tbody>\n                    <tr");

WriteLiteral(" id=\"insertRow\"");

WriteLiteral(" style=\"display:none;\"");

WriteLiteral(">\n                        <td");

WriteLiteral(" class=\"Username\"");

WriteLiteral(" contenteditable=\"true\"");

WriteLiteral(" style=\"color: grey; width: 15%;\"");

WriteLiteral(" onclick=\"changeStyle(this)\"");

WriteLiteral(">Username</td>\n                        <td");

WriteLiteral(" class=\"Password\"");

WriteLiteral(" contenteditable=\"true\"");

WriteLiteral(" style=\"color: grey; width: 15%;\"");

WriteLiteral(" onclick=\"changeStyle(this)\"");

WriteLiteral(">Password</td>\n                        <td");

WriteLiteral(" class=\"Role\"");

WriteLiteral(" contenteditable=\"true\"");

WriteLiteral(" style=\"color: grey; width: 15%;\"");

WriteLiteral(" onclick=\"changeStyle(this)\"");

WriteLiteral(">Role</td>\n                        <td");

WriteLiteral(" class=\"Blocked\"");

WriteLiteral(" contenteditable=\"true\"");

WriteLiteral(" style=\"color: grey; width: 15%;\"");

WriteLiteral(" onclick=\"changeStyle(this)\"");

WriteLiteral(">Blocked</td>\n                        <td");

WriteLiteral(" colspan=\"2\"");

WriteLiteral("><button");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"btn btn-outline-primary\"");

WriteLiteral(" onclick=\"insertRecord()\"");

WriteLiteral(" style=\"margin: 0 auto; display: block; width: 50%;\"");

WriteLiteral(">Insert</button></td>\n                    </tr>\n\n                </tbody>\n       " +
"     </table>\n        </div>\n        <div");

WriteLiteral(" class=\"w-75\"");

WriteLiteral(">\n            <div");

WriteLiteral(" class=\"row row-cols-2 justify-content-center\"");

WriteLiteral(">\n                <button");

WriteLiteral(" onclick=\"showInsert()\"");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"col btn btn-outline-light\"");

WriteLiteral(" style=\"width:25%;margin-right:5%;\"");

WriteLiteral(">Insert</button>                \n            </div>\n        </div>\n    </div>\n   " +
" <!-- Include jQuery before DataTables and Bootstrap JS -->\n    <script");

WriteLiteral(" src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js\"");

WriteLiteral("></script>\n    <script");

WriteLiteral(" src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.j" +
"s\"");

WriteLiteral(" integrity=\"sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIe" +
"Hz\"");

WriteLiteral(" crossorigin=\"anonymous\"");

WriteLiteral("></script>\n    <script");

WriteLiteral(" src=\"https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js\"");

WriteLiteral("></script>\n    <script");

WriteLiteral(" src=\"https://cdn.datatables.net/1.13.4/js/dataTables.bootstrap5.min.js\"");

WriteLiteral("></script>\n    <script>function changeStyle(element) {\n            element.innerT" +
"ext = \'\';\n            element.style.color = \"black\";\n        }\n        function " +
"refresh() {\n            var element = document.getElementById(\"insertRow\");\n    " +
"        insertRow.style.display = \"none\";\n            location.reload();\n       " +
" }\n\n        function showInsert() {\n            var element = document.getElemen" +
"tById(\"insertRow\");\n            var cells = element.querySelectorAll(\'td\'); // S" +
"elect all <td> elements within the row\n            cells.forEach(function (cell)" +
" {\n                cell.style.color = \"grey\"; // Apply the color to each cell\n  " +
"          });\n            element.querySelector(\'.Username\').innerText = \"Userna" +
"me\";\n            element.querySelector(\'.Password\').innerText = \"Password\";\n    " +
"        element.querySelector(\'.Role\').innerText = \"Role\";\n            element.q" +
"uerySelector(\'.Blocked\').innerText = \"0-1\";\n            insertRow.style.display " +
"= \"table-row\";\n        }\n        function insertRecord() {\n            var eleme" +
"nt = document.getElementById(\"insertRow\");\n            var Username = element.qu" +
"erySelector(\'.Username\').innerText;\n            var Password = element.querySele" +
"ctor(\'.Password\').innerText;\n            var Role = element.querySelector(\'.Role" +
"\').innerText;\n            var Blocked = parseInt(element.querySelector(\'.Blocked" +
"\').innerText);\n            element.style.display = \"none\";\n            var data " +
"= {\n                Username: Username,\n                Password: Password,\n    " +
"            Role: Role,\n                Blocked: Blocked,\n            };\n       " +
"         $.ajax({\n                    url: \'/en/Auth/InsertRecord\',\n            " +
"        type: \'POST\',\n                    data: JSON.stringify(data),\n          " +
"          contentType: \'application/json; charset=utf-8\',\n                    su" +
"ccess: function (response) {\n                        console.log(\'Record updated" +
" successfully\');\n                        refresh();\n                    },\n     " +
"               error: function (xhr, status, error) {\n                        co" +
"nsole.log(\'Error upadting record: \' + error);\n                    }\n            " +
"    });\n            }\n        function updateRecord(Id) {\n            var elemen" +
"t = document.getElementById(Id);\n            var listTd = element.getElementsByT" +
"agName(\'td\');\n            var Username = listTd[0].outerText;\n            var Pa" +
"ssword = listTd[1].outerText;\n            var Role = listTd[2].outerText;\n      " +
"      var Blocked = parseInt(listTd[3].outerText);\n            var data = {\n    " +
"            Id: Id,\n                Username: Username,\n                Password" +
": Password,\n                Role: Role,\n                Blocked: Blocked,\n      " +
"      };\n            $.ajax({\n                url: \'/en/Auth/UpdateRecord\',\n    " +
"            type: \'POST\',\n                data: JSON.stringify(data),\n          " +
"      contentType: \'application/json; charset=utf-8\',\n                success: f" +
"unction (response) {\n                    console.log(\'Record updated successfull" +
"y\');\n                    location.reload();\n                },\n                e" +
"rror: function (xhr, status, error) {\n                    console.log(\'Error upa" +
"dting record: \' + error);\n                }\n            });\n\n        }\n        f" +
"unction deleteRecord(Id) {\n            var data = { YOURId: Id };\n            co" +
"nsole.log(data);\n            $.ajax({\n                url: \'/en/CrudOperation/De" +
"leteRecord\',\n                type: \'POST\',\n                data: JSON.stringify(" +
"data),\n                contentType: \'application/json; charset=utf-8\',\n         " +
"       success: function (response) {\n                    console.log(\'Record de" +
"leted successfully\');\n                    refresh();\n                },\n        " +
"        error: function (xhr, status, error) {\n                    console.log(\'" +
"Error deleting record: \' + error);\n                }\n            });\n        }\n " +
"   </script>\n</body>\n\n    <!--<body style=\"background-color: black\">-->\n        " +
"");

WriteLiteral("\n        ");

WriteLiteral("\n        ");

WriteLiteral("\n    <!--</body>\n</html>-->\n");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class AdminIndexBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
